import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

import type { AppState, AppThunk } from "../../store";
import { fetchMovies, fetchSingleMovie } from "./moviesAPI";

export interface MoviesState {
  value: string;
  status: "idle" | "loading" | "failed";
  movies: any[];
  singleMovie: any;
}

const initialState: MoviesState = {
  value: "",
  movies: [],
  status: "idle",
  singleMovie: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const searchMoviesAsync = createAsyncThunk(
  "movies/fetchMovies",
  async (term: string) => {
    console.log("input term", term);

    const response = await fetchMovies(term);
    console.log(response, term);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// searchSingleMovieAsync
export const searchSingleMovieAsync = createAsyncThunk(
  "movies/fetchSingleMovie",
  async (movieId: string) => {
    const response = await fetchSingleMovie(movieId);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const moviesSlice = createSlice({
  name: "movies",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearSingleMovie: (state) => {
      state.singleMovie = null;
    },
    // getMovie: (state, action: PayloadAction<string>) => {
    //   state.movies.find((movie) => movie.id === action.payload);
    // },
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(searchMoviesAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(searchMoviesAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.movies = action.payload;
      })
      .addCase(searchSingleMovieAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(searchSingleMovieAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.singleMovie = action.payload;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const moviesSearchValue = (state: any) => state.movies.value;
export const moviesResult = (state: any) => state.movies.movies;
export const singleMovieResult = (state: any) => {
  return state.movies?.singleMovie;
};

export const { clearSingleMovie } = moviesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: AppState) => state.movies.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default moviesSlice.reducer;
